#!/usr/bin/env bash

set -e

REPO_URL="https://github.com/nicolascochin/setup_env"
INSTALL_DIR="${HOME}/.config/setup_env"

declare -A PKG_MAP
PKG_INSTALL=""
OS=""

print_help() {
  echo "Usage: setup [--shell] [--neovim] [--system] [--all] [--help]"
  echo
  echo "Options:"
  echo "  --shell       Install ZSH, oh-my-zsh, and link config files"
  echo "  --neovim      Install Neovim"
  echo "  --system      Install system-level tools (e.g. Homebrew, Distrobox)"
  echo "  --all         Run all setup steps"
  echo "  --help        Show this help message"
}

detect_os() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    OS="macos"
    PKG_INSTALL="brew install"
    PKG_MAP=(
      [bat]="bat"
      [fzf]="fzf"
      [fd_find]="fd-find"
      [ripgrep]="ripgrep"
      [zsh]="zsh"
    )
  elif [[ -f /etc/fedora-release ]]; then
    if command -v rpm-ostree &>/dev/null; then
      OS="silverblue"
      PKG_INSTALL="sudo rpm-ostree install"
    else
      OS="fedora"
      PKG_INSTALL="sudo dnf install -y"
    fi
    PKG_MAP=(
      [bat]="bat"
      [fzf]="fzf"
      [fd_find]="fd-find"
      [ripgrep]="ripgrep"
      [zsh]="zsh"
    )
  elif [[ -f /etc/debian_version ]]; then
    OS="debian"
    PKG_INSTALL="sudo apt-get install -y"
    PKG_MAP=(
      [bat]="batcat"
      [fzf]="fzf"
      [fd_find]="fd-find"
      [ripgrep]="ripgrep"
      [zsh]="zsh"
    )
  else
    echo "‚õî Unsupported operating system"
    exit 1
  fi
}

clone_or_update_repository() {
  local url="$1"
  local destination="$2"
  local name="$3"

  if [ ! -d "$destination" ]; then
    echo "üì• Cloning "$name" repository to $destination..."
    echo "git clone -q $url $destination" | bash
  else
    echo "üîÑ Updating existing $name repository..."
    git -C "$destination" pull -q
  fi
}

is_installed() {
  local cmd="$1"
  command -v "$cmd" &>/dev/null
}

install_pkg() {
  local logical_name="$1"
  local actual_name="${PKG_MAP[$logical_name]}"

  if [ -z "$actual_name" ]; then
    echo "‚õî Package '$logical_name' not defined for $OS"
    return 1
  fi

  if is_installed "$actual_name"; then
    echo "‚úî $logical_name is already installed"
  else
    echo "‚Üí Installing $logical_name ($actual_name)..."
    $PKG_INSTALL "$actual_name"
  fi
}

setup_repo() {
  clone_or_update_repository "$REPO_URL" "$INSTALL_DIR" "setup"
}

setup_shell() {
  install_pkg zsh

  if [ ! -d "${HOME}/.oh-my-zsh" ]; then
    echo "‚öôÔ∏è Installing oh-my-zsh..."
    RUNZSH=no KEEP_ZSHRC=no sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  else
    $ZSH/tools/upgrade.sh
  fi

  echo "OMZ plugins"
  clone_or_update_repository https://github.com/mattmc3/zshrc.d $HOME/.oh-my-zsh/custom/plugins/zshrc.d "zshrc.d"
  clone_or_update_repository "--depth=1 https://github.com/romkatv/powerlevel10k.git" $HOME/.oh-my-zsh/custom/themes/powerlevel10k "powerlevel10k"
  clone_or_update_repository https://github.com/wfxr/forgit.git "$HOME/.oh-my-zsh/custom/plugins/forgit" "forgit"
  clone_or_update_repository https://github.com/z-shell/F-Sy-H.git "$HOME/.oh-my-zsh/custom/plugins/F-Sy-H" "F-Sy-H"
  clone_or_update_repository https://github.com/zsh-users/zsh-autosuggestions "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions" "autosuggestions"

  echo "üîó Creating symlinks for ZSH config files..."
  # Loop through all files in the files directory
  shopt -s dotglob
  # Create files @ root only
  for file in "$INSTALL_DIR/zsh"/*; do
    [[ ! -f $file ]] && continue
    RELATIVE_PATH="$HOME/${file#$INSTALL_DIR/zsh/}"
    ln -s -f "$file" "$RELATIVE_PATH"
    echo "Created symlink for: $RELATIVE_PATH"
  done

  # For folders, take the last one and create a link to the folder
  for DIR in $(find "$INSTALL_DIR/zsh" -mindepth 1 -type d -exec bash -c '[[ $(find "$1" -mindepth 1 -type d) ]] || echo "$1"' bash {} \;); do
    RELATIVE_PATH="$HOME/${DIR#$INSTALL_DIR/zsh/}"
    PARENT=$TARGET_DIR/$(dirname $RELATIVE_PATH)
    [[ ! -d $PARENT ]] && mkdir -p $PARENT
    ln -s -f "$DIR" "$RELATIVE_PATH"
    echo "Created symlink for: $RELATIVE_PATH"
  done
}

setup_neovim() {
  # dependencies
  install_pkg fzf
  install_pkg fd_find
  install_pkg ripgrep
  # install nvim
  NVIM_BIN=$HOME/.local/bin/nvim.appimage
  mkdir -p $(dirname $NVIM_BIN) 
  curl -L -o $NVIM_BIN "https://github.com/neovim/neovim/releases/latest/download/nvim-$([[ $(uname -s) == "Linux" ]] && echo "linux" || echo "macos")-$([[ $(uname -m) == "aarch64" ]] && echo "arm64" || echo "x86_64").appimage"
  chmod +x $NVIM_BIN
  ln -sf $NVIM_BIN $(dirname $NVIM_BIN)/nvim
  # Add config
  if [[ ! -d $HOME/.config/nvim ]]; then
    ln -s "$INSTALL_DIR/neovim" $HOME/.config/nvim
    echo "Created symlink for: $HOME/.config/nvim"
  fi

}

setup_system_packages() {
  echo "üõ†Ô∏è Setting up system packages for $OS..."

  case "$OS" in
  macos)
    if ! is_installed brew; then
      echo "‚Üí Installing Homebrew..."
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    else
      echo "‚úî Homebrew is already installed"
    fi
    ;;
  silverblue)
    if ! is_installed distrobox; then
      echo "‚Üí Installing Distrobox..."
      sudo rpm-ostree install distrobox
    else
      echo "‚úî Distrobox is already installed"
    fi
    ;;
  *)
    echo "‚ÑπÔ∏è No additional system setup required for $OS"
    ;;
  esac
}

main() {
  if [[ "$1" == "--help" || "$#" -eq 0 ]]; then
    print_help
    exit 0
  fi

  detect_os
  setup_repo

  local do_system=0
  local do_shell=0
  local do_neovim=0

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
    --shell)
      do_shell=1
      ;;
    --neovim)
      do_neovim=1
      ;;
    --system)
      do_system=1
      ;;
    --all)
      do_shell=1
      do_neovim=1
      do_system=1
      ;;
    --help)
      print_help
      exit 0
      ;;
    *)
      echo "‚õî Unknown option: $1"
      print_help
      exit 1
      ;;
    esac
    shift
  done

  ((do_system)) && setup_system_packages
  ((do_shell)) && setup_shell
  ((do_neovim)) && setup_neovim
}

main "$@"
